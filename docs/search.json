[
  {
    "objectID": "aboutme.html",
    "href": "aboutme.html",
    "title": "About me",
    "section": "",
    "text": "A little about me\nHi everyone! My name is Katie Wells and I am a first year MPH student in the Epi concentration. I went to UGA for undergrad and majored in genetics; I also completed 2 years of undergraduate research in pertussis under Dr. Eric Harvill. I would love to study infectious disease epi and do more research in this field. I used R in undergrad in one course, and I just completed EPID 7500. I feel like there is always more to learn and understand in R no matter your skill level. I want to use this course to get more comfortable in programming and coding as I feel it is an integral part to almost every public health career. Something fun about me: I’ve had three hand surgeries in the past year all over a can of tomatoes (buy a decent can opener, everyone).\n\n\nHere’s a picture of me!\n\n\n\nIf you see me on campus say hey!\n\n\n\n\nSomething I find cool\nArtificial Intelligence for infectious disease Big Data Analytics - ScienceDirect\nI mentioned earlier that I am interested in infectious disease research; here’s an article I found about how AI can be used to increase accuracy in diagnosis, suggest treatments, and improve public health outcomes."
  },
  {
    "objectID": "coding_exercise.html",
    "href": "coding_exercise.html",
    "title": "R Coding Exercise",
    "section": "",
    "text": "#load dslabs packages and others\n#look at help file for gapminder data\n#get an overview of data structure\n#get a summary of data\n#determine the type of object gapminder is class(gapminder)\n#assign African coutnries to their own dataset\n#get an overview of africadata\n#get a summary of africadata\n#assign African countries’ infant mortality and life expectancy data to #its own object\n#assign African countries’ life expectancy and population data to its #own object\n#get an overview of africa_il and africa_lp\n#get a summary of africa_il and africa_lp\n#plot life expectancy as a function of infant mortality\n#from the plot there appears to be a negative correlation #between the two variables\n#plot life expectancy as a function of population size\n#from the plot there appears to be a #positive correlation between the two variables #the “streaks” of data #seem to come from the number of years avaiable for each country\n#find na values in infant_mortality\n#there is missing infant_mortality data up #until 1981 and again in 2016, so we should choose a year like 2000 to #avoid any NAs\n#make a dataset only including data from 2000\n#get overview and summary of africadata_2000\n#plot life expectancy as a function of infant mortality with 2000 data\n#from the plot there seems to be a negative correlation #between the two variables\n#plot life expectancy as a function of population size with 2000 data\n#from the plot there #is no clear correlation for the two variables in this dataset\n#fit 2000 data to a linear model with life_expectancy as the outcome and #infant_mortality as the predictor\n#get a summary of fit1\n#the p-value of 2.83e-08 show that #there is a significant correlation between life expectancy and infant #mortality in the 2000 dataset\n#fit 2000 data to a linear model with life_expectancy as the outcome and #population as the predictor\n#get a summary of fit2\n#the p-vlaue of 0.616 shows there #is not a significant correlation between life expectancy and population #in the 2000 dataset"
  },
  {
    "objectID": "coding_exercise.html#fitting-gdp-against-infant-mortality-and-population-in-a-linear-model",
    "href": "coding_exercise.html#fitting-gdp-against-infant-mortality-and-population-in-a-linear-model",
    "title": "R Coding Exercise",
    "section": "Fitting GDP against Infant Mortality and Population in a Linear Model",
    "text": "Fitting GDP against Infant Mortality and Population in a Linear Model\n\n## Feeling a little curious so I made some graphs...\n\n### Wonder what effects GDP on IM looks like...\n\nggplot2::ggplot(data = africadata_2000, mapping = aes(x = log(gdp),\n                                                      y = log(infant_mortality))) +\n  geom_point() + labs(x = \"Log GDP\", y = \"Log Infant Mortality\", \n                      title = \"Effects of GDP on Infant Mortality in 2000\")\n\n\n\n### Cool, cool. Now what if I do this with population...\nggplot2::ggplot(data = africadata_2000, mapping = aes(x = log(gdp),\n                                                      y = log(population))) +\n  geom_point() + labs(x = \"Log GDP\", y = \"Log Population\", \n                      title = \"Effects of GDP on Population in 2000\")\n\n\n\n#### ^^ NICEEEEE!\n\n\n## Fitting GDP against Infant Mortality\nfit3 <- lm(gdp ~ infant_mortality, data = africadata_2000)\n\n### Fit3 results\ntidy(fit3)\n\n# A tibble: 2 × 5\n  term                 estimate   std.error statistic  p.value\n  <chr>                   <dbl>       <dbl>     <dbl>    <dbl>\n1 (Intercept)      32124071647. 9128139601.      3.52 0.000945\n2 infant_mortality  -260618189.  107937461.     -2.41 0.0195  \n\n## Fitting GDP against Population\nfit4 <- lm(gdp ~ population, data=africadata_2000)\n\n### Fit 4 results\ntidy(fit4)\n\n# A tibble: 2 × 5\n  term           estimate   std.error statistic   p.value\n  <chr>             <dbl>       <dbl>     <dbl>     <dbl>\n1 (Intercept) 1620865586. 3499336123.     0.463 0.645    \n2 population         634.        130.     4.88  0.0000119\n\n\nFit 3 model suggests that there may be a negative association between GDP and Infant Mortality. Since the p-value is less than our alpha of 0.05 (p < 0.02), we find these results to be significant. Fit 3 model suggest that there may be a positive association between GDP and population. Since the p-value is less than our alpha of 0.05 (p < 0.001), we can reject the null hypothesis (no association)."
  },
  {
    "objectID": "dataanalysis_exercise.html",
    "href": "dataanalysis_exercise.html",
    "title": "My Data Analysis Portfolio",
    "section": "",
    "text": "This data was obtained from data.cdc.gov and contains data from 2/24/2022 to 1/26/2023. This dataset contains the same values used to display information available on the COVID Data Tracker, and is updated weekly. The CDC combines three metrics (new COVID-19 admissions per 100,000 population in the past 7 days, the percent of staffed inpatient beds occupied by COVID-19 patients, and total new COVID-19 cases per 100,000 population in the past 7 days) to determine the COVID-19 community level and classify it as low, medium, or high. This community level can help people and communities make decisions based on their circumstances and individual needs. It has a total of 12 columns and 158,000 rows including all available county data.\nI decided to keep the “date_updated” variable as there will be multiple observations for each county.\nI decided I needed to reduce the number of observations to make this data a little easier to use; I decided to filter by Georgia to bring this number down as well as give me some relatable data.\nThis is still a lot of observations, so I decided to filter to approximately a six-month period (07-28-2022 - 01-26-2023)\nI think it would be interesting to use this data analyze the number of COVID cases per 100k in relation to bed utilization and hospital admissions, as well as the number of cases per 100k over time to observe trends in infection. I don;t know the best way to incorporate it, but a graph (boxplot maybe?) including the community leel would also be cool to see. These analyses could tell us something about COVID 19 case trends in Georgia during these last 6 months; as the pandemic draws on after almost 3 year it would be interesting to see what level of community severity still exists."
  },
  {
    "objectID": "dataanalysis_exercise.html#load-cleaned-data-and-load-necessary-libraries",
    "href": "dataanalysis_exercise.html#load-cleaned-data-and-load-necessary-libraries",
    "title": "My Data Analysis Portfolio",
    "section": "Load Cleaned Data and Load Necessary Libraries",
    "text": "Load Cleaned Data and Load Necessary Libraries\n\nclean_data <- readRDS(\"community.rds\")\nlibrary(tidyverse)"
  },
  {
    "objectID": "dataanalysis_exercise.html#data-visualization-covid-19-in-columbia-county",
    "href": "dataanalysis_exercise.html#data-visualization-covid-19-in-columbia-county",
    "title": "My Data Analysis Portfolio",
    "section": "Data Visualization: COVID-19 in Columbia County",
    "text": "Data Visualization: COVID-19 in Columbia County\n\n# Seeing COVID-19 Cases per 100K over Time\nggplot(clean_data %>% filter(county == \"Columbia County\"), aes(x = date_updated, y = covid_cases_per_100k)) + geom_line() + labs(x = \"Date\", y = \"Cases Per 100K\")\n\n\n\n# Boxplots of Inpatient Bed Utilization vs COVID Cases per 100K by Threat Level\nclean_data <- clean_data %>% rename(Threat_Level = `covid-19_community_level`) %>% mutate(Threat_Level = factor(Threat_Level, levels = c(\"Low\", \"Medium\", \"High\")))\n\nggplot(clean_data %>% filter(county == \"Columbia County\"), aes(x = covid_cases_per_100k, y = covid_inpatient_bed_utilization, group = Threat_Level, fill = Threat_Level)) + geom_boxplot() + labs(x = \"Covid Cases per 100K\", y = \"COVID Inpatient Bed Utilization\")"
  },
  {
    "objectID": "dataanalysis_exercise.html#data-visualization-covid-19-in-georgia-counties-that-start-wthe-letter-c",
    "href": "dataanalysis_exercise.html#data-visualization-covid-19-in-georgia-counties-that-start-wthe-letter-c",
    "title": "My Data Analysis Portfolio",
    "section": "Data Visualization: COVID-19 in Georgia Counties that Start w/the Letter C",
    "text": "Data Visualization: COVID-19 in Georgia Counties that Start w/the Letter C\n\n# What Counties Have the Most COVID-19 Hospital Admissions?\nggplot(clean_data %>% filter(substr(county, 1, 1) == \"C\"), aes(x = covid_hospital_admissions_per_100k, y = county)) + geom_col()"
  },
  {
    "objectID": "fluanalysis/code/exploration.html",
    "href": "fluanalysis/code/exploration.html",
    "title": "My Data Analysis Portfolio",
    "section": "",
    "text": "#load required packages\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(here)\n\nhere() starts at C:/Users/Katie/Documents/2022-2023/MADA/katiewells-MADA-portfolio\n\n\n\n#load data\nflu2 <- readRDS(here(\"fluanalysis\", \"data\", \"flu2.rds\"))\n\n\n#provide summary data for important variables\nflu2 %>% pull(Nausea) %>% summary()\n\n No Yes \n475 255 \n\nflu2 %>% pull(BodyTemp) %>% summary()\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  97.20   98.20   98.50   98.94   99.30  103.10 \n\n\n\n#look at the distribution of BodyTemp\nflu2 %>% ggplot(aes(x=BodyTemp)) + geom_histogram() \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nLooks like of the body temperatures cluster around 98.5 degrees with some right skew.\n\n#take a look at the relationship between BodyTemp and some predictors\nflu2 %>% ggplot(aes(x=Nausea, y=BodyTemp)) + geom_boxplot()\n\n\n\nflu2 %>% ggplot(aes(x=CoughIntensity, y=BodyTemp)) + geom_boxplot()\n\n\n\nflu2 %>% ggplot(aes(x=Sneeze, y=BodyTemp)) + geom_boxplot()\n\n\n\nflu2 %>% ggplot(aes(x=Weakness, y=BodyTemp)) + geom_boxplot()"
  },
  {
    "objectID": "fluanalysis/code/fitting.html",
    "href": "fluanalysis/code/fitting.html",
    "title": "My Data Analysis Portfolio",
    "section": "",
    "text": "#load required packages\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(here)\n\nhere() starts at C:/Users/Katie/Documents/2022-2023/MADA/katiewells-MADA-portfolio\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──\n✔ broom        1.0.3     ✔ rsample      1.1.1\n✔ dials        1.1.0     ✔ tune         1.0.1\n✔ infer        1.0.4     ✔ workflows    1.1.3\n✔ modeldata    1.1.0     ✔ workflowsets 1.0.0\n✔ parsnip      1.0.4     ✔ yardstick    1.1.0\n✔ recipes      1.0.5     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Search for functions across packages at https://www.tidymodels.org/find/\n\nlibrary(performance)\n\n\nAttaching package: 'performance'\n\nThe following objects are masked from 'package:yardstick':\n\n    mae, rmse\n\n\n\n#load data\nflu2 <- readRDS(here(\"fluanalysis\", \"data\", \"flu2.rds\"))\n\n\n#specify functional form of model\nlm_mod <- linear_reg() %>% set_engine(\"lm\") \n#Fit a linear model to the continuous outcome (Body temperature) using only the main predictor of interest (RunnyNose)\nlm_fit <- lm_mod %>% fit(BodyTemp ~ RunnyNose, data=flu2)\nlm_fit\n\nparsnip model object\n\n\nCall:\nstats::lm(formula = BodyTemp ~ RunnyNose, data = data)\n\nCoefficients:\n (Intercept)  RunnyNoseYes  \n     99.1431       -0.2926  \n\n\n\nglance(lm_fit)\n\n# A tibble: 1 × 12\n  r.squ…¹ adj.r…² sigma stati…³ p.value    df logLik   AIC   BIC devia…⁴ df.re…⁵\n    <dbl>   <dbl> <dbl>   <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>   <dbl>   <int>\n1  0.0123  0.0110  1.19    9.08 0.00268     1 -1162. 2329. 2343.   1031.     728\n# … with 1 more variable: nobs <int>, and abbreviated variable names\n#   ¹​r.squared, ²​adj.r.squared, ³​statistic, ⁴​deviance, ⁵​df.residual\n\n\n\n#fit another linear model to the continuous outcome using all (important) predictors of interest.\n\nLM_BT <- function(x) {\n  lm_mod %>%\n    fit(BodyTemp ~ {{x}}, data = flu2)\n}\n\nall_pred <- lapply(flu2, LM_BT)\n\n\nlm_mod2 <- linear_reg() %>%\n  set_engine(\"lm\")\n\n\nlm_fit2 <- lm_mod2 %>% \n          fit(BodyTemp ~ ., data = flu2)\nlm_fit2\n\nparsnip model object\n\n\nCall:\nstats::lm(formula = BodyTemp ~ ., data = data)\n\nCoefficients:\n           (Intercept)    SwollenLymphNodesYes      ChestCongestionYes  \n             97.925243               -0.165302                0.087326  \n       ChillsSweatsYes      NasalCongestionYes              CoughYNYes  \n              0.201266               -0.215771                0.313893  \n             SneezeYes              FatigueYes      SubjectiveFeverYes  \n             -0.361924                0.264762                0.436837  \n           HeadacheYes            WeaknessMild        WeaknessModerate  \n              0.011453                0.018229                0.098944  \n        WeaknessSevere           WeaknessYNYes      CoughIntensityMild  \n              0.373435                      NA                0.084881  \nCoughIntensityModerate    CoughIntensitySevere             CoughYN2Yes  \n             -0.061384               -0.037272                      NA  \n           MyalgiaMild         MyalgiaModerate           MyalgiaSevere  \n              0.164242               -0.024064               -0.129263  \n          MyalgiaYNYes            RunnyNoseYes               AbPainYes  \n                    NA               -0.080485                0.031574  \n          ChestPainYes             DiarrheaYes                EyePnYes  \n              0.105071               -0.156806                0.131544  \n           InsomniaYes             ItchyEyeYes               NauseaYes  \n             -0.006824               -0.008016               -0.034066  \n              EarPnYes              HearingYes          PharyngitisYes  \n              0.093790                0.232203                0.317581  \n         BreathlessYes              ToothPnYes               VisionYes  \n              0.090526               -0.022876               -0.274625  \n              VomitYes               WheezeYes  \n              0.165272               -0.046665  \n\n\n\nglance(lm_fit2)\n\n# A tibble: 1 × 12\n  r.squ…¹ adj.r…² sigma stati…³ p.value    df logLik   AIC   BIC devia…⁴ df.re…⁵\n    <dbl>   <dbl> <dbl>   <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>   <dbl>   <int>\n1   0.129  0.0860  1.14    3.02 4.20e-8    34 -1116. 2304. 2469.    909.     695\n# … with 1 more variable: nobs <int>, and abbreviated variable names\n#   ¹​r.squared, ²​adj.r.squared, ³​statistic, ⁴​deviance, ⁵​df.residual\n\n\n\nglm_mod <- logistic_reg() %>%\n  set_engine(\"glm\")\n\n\nglm_fit <- glm_mod %>% \n          fit(Nausea ~ RunnyNose, data = flu2)\nglm_fit\n\nparsnip model object\n\n\nCall:  stats::glm(formula = Nausea ~ RunnyNose, family = stats::binomial, \n    data = data)\n\nCoefficients:\n (Intercept)  RunnyNoseYes  \n    -0.65781       0.05018  \n\nDegrees of Freedom: 729 Total (i.e. Null);  728 Residual\nNull Deviance:      944.7 \nResidual Deviance: 944.6    AIC: 948.6\n\n\n\nglance(glm_fit)\n\n# A tibble: 1 × 8\n  null.deviance df.null logLik   AIC   BIC deviance df.residual  nobs\n          <dbl>   <int>  <dbl> <dbl> <dbl>    <dbl>       <int> <int>\n1          945.     729  -472.  949.  958.     945.         728   730\n\n\n\nglm_mod2 <- logistic_reg() %>%\n  set_engine(\"glm\")\n\n\nglm_fit2 <- glm_mod2 %>% \n          fit(Nausea ~ ., data = flu2)\nglm_fit2\n\nparsnip model object\n\n\nCall:  stats::glm(formula = Nausea ~ ., family = stats::binomial, data = data)\n\nCoefficients:\n           (Intercept)    SwollenLymphNodesYes      ChestCongestionYes  \n              0.222870               -0.251083                0.275554  \n       ChillsSweatsYes      NasalCongestionYes              CoughYNYes  \n              0.274097                0.425817               -0.140423  \n             SneezeYes              FatigueYes      SubjectiveFeverYes  \n              0.176724                0.229062                0.277741  \n           HeadacheYes            WeaknessMild        WeaknessModerate  \n              0.331259               -0.121606                0.310849  \n        WeaknessSevere           WeaknessYNYes      CoughIntensityMild  \n              0.823187                      NA               -0.220794  \nCoughIntensityModerate    CoughIntensitySevere             CoughYN2Yes  \n             -0.362678               -0.950544                      NA  \n           MyalgiaMild         MyalgiaModerate           MyalgiaSevere  \n             -0.004146                0.204743                0.120758  \n          MyalgiaYNYes            RunnyNoseYes               AbPainYes  \n                    NA                0.045324                0.939304  \n          ChestPainYes             DiarrheaYes                EyePnYes  \n              0.070777                1.063934               -0.341991  \n           InsomniaYes             ItchyEyeYes                EarPnYes  \n              0.084175               -0.063364               -0.181719  \n            HearingYes          PharyngitisYes           BreathlessYes  \n              0.323052                0.275364                0.526801  \n            ToothPnYes               VisionYes                VomitYes  \n              0.480649                0.125498                2.458466  \n             WheezeYes                BodyTemp  \n             -0.304435               -0.031246  \n\nDegrees of Freedom: 729 Total (i.e. Null);  695 Residual\nNull Deviance:      944.7 \nResidual Deviance: 751.5    AIC: 821.5\n\n\n\nglance(glm_fit2)\n\n# A tibble: 1 × 8\n  null.deviance df.null logLik   AIC   BIC deviance df.residual  nobs\n          <dbl>   <int>  <dbl> <dbl> <dbl>    <dbl>       <int> <int>\n1          945.     729  -376.  821.  982.     751.         695   730"
  },
  {
    "objectID": "fluanalysis/code/wrangling.html",
    "href": "fluanalysis/code/wrangling.html",
    "title": "My Data Analysis Portfolio",
    "section": "",
    "text": "#load required packages\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(here)\n\nhere() starts at C:/Users/Katie/Documents/2022-2023/MADA/katiewells-MADA-portfolio\n\n\n\n#load data\nflu <- readRDS(here(\"fluanalysis\", \"data\", \"SympAct_Any_Pos.Rda\"))\n\n\n#remove unnecessary variables\nflu <- flu %>% select(-contains(c(\"Score\", \"Total\", \"FluA\", \"FluB\", \"Dxname\", \"Activity\")))\nflu <- flu %>% subset(select = -(Unique.Visit))\nflu <- flu %>% drop_na()\n\n\nsaveRDS(flu, file = here(\"fluanalysis\", \"data\", \"flu2.rds\"))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MADA website and data analysis portfolio",
    "section": "",
    "text": "Hey y’all!\n\n:)\nWelcome to my website and data analysis portfolio.\n\nPlease use the Menu Bar above to look around.\nHave fun and GO DAWGS!"
  },
  {
    "objectID": "tidytuesday_exercise.html",
    "href": "tidytuesday_exercise.html",
    "title": "Tidy Tuesday Exercise",
    "section": "",
    "text": "Here’s my contribution to the Tidy Tuesday analysis for the 2/14/23 dataset Hollywood Age Gaps. This data was taken from Hollywood Age Gap via https://www.data-is-plural.com/archive/2018-02-07-edition/. It takes a look at the differences between ages in couples in movies. Some things I would like to explore are:\n1) the relationship between release year and age differences\n2) how actor/character age and gender are related\n3) how much the movies deviate from the average age difference\nLet’s load the packages I’ll need.\n\n#load packages\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\nNow for the data; let’s load it and take a look at the structure.\n\n#load data\nage_gaps <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-02-14/age_gaps.csv')\n\nRows: 1155 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (6): movie_name, director, actor_1_name, actor_2_name, character_1_gend...\ndbl  (5): release_year, age_difference, couple_number, actor_1_age, actor_2_age\ndate (2): actor_1_birthdate, actor_2_birthdate\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nglimpse(age_gaps)\n\nRows: 1,155\nColumns: 13\n$ movie_name         <chr> \"Harold and Maude\", \"Venus\", \"The Quiet American\", …\n$ release_year       <dbl> 1971, 2006, 2002, 1998, 2010, 1992, 2009, 1999, 199…\n$ director           <chr> \"Hal Ashby\", \"Roger Michell\", \"Phillip Noyce\", \"Joe…\n$ age_difference     <dbl> 52, 50, 49, 45, 43, 42, 40, 39, 38, 38, 36, 36, 35,…\n$ couple_number      <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ actor_1_name       <chr> \"Ruth Gordon\", \"Peter O'Toole\", \"Michael Caine\", \"D…\n$ actor_2_name       <chr> \"Bud Cort\", \"Jodie Whittaker\", \"Do Thi Hai Yen\", \"T…\n$ character_1_gender <chr> \"woman\", \"man\", \"man\", \"man\", \"man\", \"man\", \"man\", …\n$ character_2_gender <chr> \"man\", \"woman\", \"woman\", \"woman\", \"man\", \"woman\", \"…\n$ actor_1_birthdate  <date> 1896-10-30, 1932-08-02, 1933-03-14, 1930-09-17, 19…\n$ actor_2_birthdate  <date> 1948-03-29, 1982-06-03, 1982-10-01, 1975-11-08, 19…\n$ actor_1_age        <dbl> 75, 74, 69, 68, 81, 59, 62, 69, 57, 77, 59, 56, 65,…\n$ actor_2_age        <dbl> 23, 24, 20, 23, 38, 17, 22, 30, 19, 39, 23, 20, 30,…\n\n\nThis data has been relatively cleaned and wrangled already; let’s just get some stats I might be interested in.\n\nage_gaps %>% pull(release_year) %>% range()\n\n[1] 1935 2022\n\nage_gaps %>% pull(actor_1_age) %>% range()\n\n[1] 18 81\n\nage_gaps %>% pull(actor_2_age) %>% range()\n\n[1] 17 68\n\nage_gaps %>% pull(age_difference) %>% range()\n\n[1]  0 52\n\n\nThis gives me the range of release years, actor ages, and age differences for all the movies. Seeing these, let’s plot the release years against age differences and see if any trends appear. Just for fun, let’s make this interactive so we can see which movies fall where. This will let me hover over each dot and see the movie name and age difference. I can do this with plotly.\n\nplot <- age_gaps %>% ggplot(aes(x=release_year, y=age_difference)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") + \n  labs(title=\"Age Gaps in Movies through the Years\", x=\"Year\", y=\"Age Difference\")\nggplotly(plot)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nWell…there seems to be a slight negative correlation between release year and age difference, but more movies have been released in recent years which is likely skewing the data. The interactive portion provided by plotly() makes it very easy to see the movie with the largest age difference (52 years) was released in 1971.\nLet’s look at the frequency of age differences with a bar graph.\n\nage_gaps %>% ggplot(aes(x=age_difference)) + \n  geom_bar(fill=\"#00C5CD\") + \n  scale_x_continuous(n.breaks=10) + \n  labs(title=\"Age Gap Frequency\", x=\"Age difference (years)\", y=\"observations\")\n\n\n\n\nLooks like 2 and 3 years is the most popular age gap in these movies.\nAfter examining the data further, I noticed that actor 1 (and therefore character 1) was always the older of the couple. I want to see the distribution of age difference based on whether the older character is male or female. I think a boxplot would be a good way to visualize this information.\n\n#make a boxplot of character 1 gender vs. age difference\nage_gaps %>% ggplot(aes(x=character_1_gender, y=age_difference, fill=character_1_gender)) + \n  geom_boxplot() + \n  stat_summary(fun = \"mean\", geom = \"point\", shape = 8, size = 2, color = \"black\") + \n  labs(x=\"Older Character Gender\", y=\"Age Difference (years)\") + \n  ggtitle(\"Age Difference and Older Character's Gender\")\n\n\n\n\nThis tells us there are many more movies where the older character is male and that the mean and median age difference is higher in those movies. The one very obvious outlier of Harold and Maude on the older female character side is visible here.\nLet’s see how a random sample of movies compares to the average age difference of this dataset.\n\n#calculate the mean age difference\nage_gaps %>% pull(age_difference) %>% mean()\n\n[1] 10.42424\n\n\n\n#take a (fixed) random sample (so y'all can reproduce if you want)\nset.seed(20)\nrand_age <- age_gaps %>% sample_n(size=20)\n\n\n#make a new column with the z score (normalized age difference)\nrand_age <- rand_age %>% mutate(diff_z = round((age_difference - mean(age_difference))/sd(age_difference), 2))  \n#make a new column telling whether each movie is above or below the average\nrand_age <- rand_age %>% mutate(diff_v = ifelse(diff_z < 0, \"below\", \"above\"))\n\nI wanted a way to show how different these movies were from each other (and the average) in terms of age difference, and a StackOverflow post gave me the idea to do a diverging bar graph.\n\n#graph a diverging bar plot showing how many standard deviations each movie is away from the mean\nggplot(rand_age, aes(x=movie_name, y=diff_z, label=diff_z)) + \n  geom_bar(stat='identity', aes(fill=diff_v), width=.5)  +\n  scale_fill_manual(name=\"Age Difference\", \n                    labels = c(\"Above Average\", \"Below Average\"), \n                    values = c(\"above\"=\"#00C5CD\", \"below\"=\"#f8766d\")) + \n  labs(title= \"Movies & their deviations from the average age difference\", x=\"Movie Name\", y=\"Standard Deviation\") + \n  coord_flip()\n\n\n\n\nSeems like most of the movies in this random sample fall below the average of 10.42424 years between the actors.\nJust for fun, let’s see how many movies in the whole dataset are above or below the average. There’s no way to be able to see all of them in a graph like the one above so let’s just look at the numbers.\n\n#make a new column with the z score (normalized age difference)\nage_gaps <- age_gaps %>% mutate(diff_z = round((age_difference - mean(age_difference))/sd(age_difference), 2))  \n#make a new column telling whether each movie is above or below the average\nage_gaps <- age_gaps %>% mutate(diff_v = ifelse(diff_z < 0, \"below\", \"above\"))\n#get counts of above and below the average\nage_gaps %>% pull(diff_v) %>% table()\n\n.\nabove below \n  464   691 \n\n\nLooks like a 60/40 split.\nOverall it looks like: age gaps have decreased over the years (but movie release has increased), 2-3 years is the most common age gap, men are usually the older actor/character, and only around 40% of movies in this dataset have an above average age difference."
  },
  {
    "objectID": "visualization_exercise.html",
    "href": "visualization_exercise.html",
    "title": "Visualization Exercise",
    "section": "",
    "text": "This data comes from FiveThirtyEight’s article https://projects.fivethirtyeight.com/college-fight-song-lyrics/. It contains stats on the fight songs of 65 schools – all those in the Power Five conferences (the ACC, Big Ten, Big 12, Pac-12 and SEC), plus Notre Dame– including duration, beats per minute, and mentions of typical themes of a fight song. I am going to try to recreate the graph of fight song beats per minute versus duration. The original graph is below (with UGA selected); it is interactive, allowing users to select a university to see where they fall on the fight song bpm vs duration scale as well as how many “fight song cliches” it contains.\n\nHere I load all the packages I need to recreate this graph and load the data provided by FiveThirtyEight.\n\n#load packages\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\n\n#load the data\nfight_songs <-read_csv(\"data/fight-songs.csv\")\n\nRows: 65 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (19): school, conference, song_name, writers, year, student_writer, offi...\ndbl  (4): bpm, sec_duration, number_fights, trope_count\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe original graph includes intersecting lines with the average bpm and duration, so I took the mean of each column to determine those exact values so I could include them in my recreation.\n\nfight_songs %>% pull(bpm) %>% mean()\n\n[1] 128.8\n\nfight_songs %>% pull(sec_duration) %>% mean()\n\n[1] 71.90769\n\n\nNow to the graphing. I decided to create this graph in ggplot first and then make it interactive using the ggplotly() function from plotly.\n\ngraph <- fight_songs %>% \n  #color code each point by school name and include number of tropes\n  ggplot(aes(x=sec_duration, y=bpm, color=school, text=trope_count)) +\n  #make a scatter plot\n  geom_point(size=3, alpha=0.5) + \n  #include the average lines using the means I calculated above.\n  geom_vline(xintercept = 71.90769) + \n  geom_hline(yintercept = 128.8) + \n  #omit the legend \n  theme(legend.position=\"none\") + \n  #shift scale\n  scale_x_continuous(limits= c(0,180), breaks = seq(0,180,20))+\n  scale_y_continuous(limits= c(50,200), breaks= c(0,60,80,100,120,140,160,180,200)) +\n  #match the quadrant labels \n  annotate(\"text\", x = 20, y = 65, label = \"Slow but short\") + \n  annotate(\"text\", x = 20, y = 190, label = \"Fast and short\") + \n  annotate(\"text\", x = 135, y = 190, label = \"Fast but long\") + \n  annotate(\"text\", x = 135, y = 65, label = \"Slow and long\") + \n  #match the axes labels and title\n  labs(x=\"Duration\", y=\"Beats per Minute\") +\n  ggtitle(\"How Fight Songs Stack Up\")\n\n\nggplotly(graph)\n\n\n\n\n\nThere were two main things I struggled with in this recreation. I searched and searched for some “university color palette for R” but came up empty. The only options I was left with were using default ggplot colors or making my own using hex codes for each school. I decided that I would use default colors to save myself some sanity (and each school has its own color, just not its school color). I also could not figure out how to include a separate chart of sorts for the number of tropes in each song; after some searching, I found that the aes(text= ) in ggplot() mapping could be used to display the trope number in the hover menu after converting using ggplotly(). You can see in the final that Georgia does indeed have 1 fight song cliche in my recreation (the number at the bottom of the hover menu).\nI played around with ggvis for a few hours on my first attempt and, while I found it interesting with cool outputs, I had a hard time figuring out how to add all the elements that I needed to recreate this graph. Upon reading, I learned that ggvis is a sort of work-in-progress, and everything in ggplot does not have a direct translation to ggvis. I think ggvis could be used to make some really cool visualizations, but I was unsuccessful in using it for this exercise.\nOverall, this recreation is not an exact replica of the original but I think it turned out pretty good and I really enjoyed getting to play around with the interactive features of plotly()."
  }
]